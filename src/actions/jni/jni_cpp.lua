--
-- jni_cpp.lua
-- Generate an Android project makefile.
-- Copyright (c) 2012 Richard Swift and the Premake project
--

	premake.jni.cpp = { }
	local cpp = premake.jni.cpp
	local jni = premake.jni

	function premake.jni_cpp(prj)
		-- create a shortcut to the compiler interface
		local cc = premake.gettool(prj)
		-- build a list of supported target platforms that also includes a generic build
		local platforms = premake.filterplatforms(prj.solution, cc.platforms, "Native")

		_p('# %s project makefile autogenerated by Premake', premake.action.current().shortname)
		_p('LOCAL_PATH := $(call my-dir)')

		for _, platform in ipairs(platforms) do
			for cfg in premake.eachconfig(prj, platform) do
				premake.jni_cpp_config(prj, cfg, cc)
			end
		end
	end

	function premake.jni_getincludedirs(prj,includedirs)
		local result = { }
		for _,dir in ipairs(includedirs) do
			str=prj.basedir .. "/jni/" .. _MAKE.esc(dir)
			table.insert(result, "-I" .. str)
		end
		return result
	end

	function premake.jni_cpp_config(prj, cfg, cc)

		_p(' include $(CLEAR_VARS)')
		
		name=cfg.targetname
		if name == nil then
			name=prj.name .. cfg.name
		end
		
		_p('  LOCAL_MODULE := %s', name)
		_p('  LOCAL_LDLIBS := %s', table.concat(cc.getlinkflags(cfg), " "))
		_p('  LOCAL_CPPFLAGS  := %s', table.concat(cc.getcppflags(cfg), " "))
		_p('  LOCAL_CFLAGS    := %s %s %s', table.concat(table.join(cc.getcflags(cfg), cfg.buildoptions), " "),table.concat(cc.getdefines(cfg.defines), " "),table.concat(premake.jni_getincludedirs(prj,cfg.includedirs), " "))

		srcfiles=""
		
		for _, file in ipairs(cfg.files) do
			if path.iscppfile(file) then
				srcfiles = srcfiles .. " " .. _jni.esc(file)
			end
		end
		_p('  LOCAL_SRC_FILES := %s', srcfiles)
		
		if cfg.kind == "SharedLib" then
			_p(' include $(BUILD_SHARED_LIBRARY)')
		elseif cfg.kind == "StaticLib" then
			_p(' include $(BUILD_STATIC_LIBRARY)')
		else
			_p(' LOCAL_STATIC_LIBRARIES := android_native_app_glue')
			_p(' include $(BUILD_SHARED_LIBRARY)')
			_p(' $(call import-module,android/native_app_glue)')
		end
		_p('')
	end

