diff -rupN premake-4.4-beta4/src/actions/jni/jni_cpp.lua premake-4.4-beta5/src/actions/jni/jni_cpp.lua
--- premake-4.4-beta4/src/actions/jni/jni_cpp.lua	1970-01-01 01:00:00.000000000 +0100
+++ premake-4.4-beta5/src/actions/jni/jni_cpp.lua	2012-06-06 21:51:46.296247595 +0100
@@ -0,0 +1,70 @@
+--
+-- jni_cpp.lua
+-- Generate an Android project makefile.
+-- Copyright (c) 2012 Richard Swift and the Premake project
+--
+
+	premake.jni.cpp = { }
+	local cpp = premake.jni.cpp
+	local jni = premake.jni
+
+	function premake.jni_cpp(prj)
+		-- create a shortcut to the compiler interface
+		local cc = premake.gettool(prj)
+		-- build a list of supported target platforms that also includes a generic build
+		local platforms = premake.filterplatforms(prj.solution, cc.platforms, "Native")
+
+		_p('# %s project makefile autogenerated by Premake', premake.action.current().shortname)
+		_p('LOCAL_PATH := $(call my-dir)')
+
+		for _, platform in ipairs(platforms) do
+			for cfg in premake.eachconfig(prj, platform) do
+				premake.jni_cpp_config(prj, cfg, cc)
+			end
+		end
+	end
+
+	function premake.jni_getincludedirs(prj,includedirs)
+		local result = { }
+		for _,dir in ipairs(includedirs) do
+			str=prj.basedir .. "/jni/" .. _MAKE.esc(dir)
+			table.insert(result, "-I" .. str)
+		end
+		return result
+	end
+
+	function premake.jni_cpp_config(prj, cfg, cc)
+
+		_p(' include $(CLEAR_VARS)')
+		
+		name=cfg.targetname
+		if name == nil then
+			name=prj.name .. cfg.name
+		end
+		
+		_p('  LOCAL_MODULE := %s', name)
+		_p('  LOCAL_LDLIBS := %s', table.concat(cc.getlinkflags(cfg), " "))
+		_p('  LOCAL_CPPFLAGS  := %s', table.concat(cc.getcppflags(cfg), " "))
+		_p('  LOCAL_CFLAGS    := %s %s %s', table.concat(table.join(cc.getcflags(cfg), cfg.buildoptions), " "),table.concat(cc.getdefines(cfg.defines), " "),table.concat(premake.jni_getincludedirs(prj,cfg.includedirs), " "))
+
+		srcfiles=""
+		
+		for _, file in ipairs(cfg.files) do
+			if path.iscppfile(file) then
+				srcfiles = srcfiles .. " " .. _jni.esc(file)
+			end
+		end
+		_p('  LOCAL_SRC_FILES := %s', srcfiles)
+		
+		if cfg.kind == "SharedLib" then
+			_p(' include $(BUILD_SHARED_LIBRARY)')
+		elseif cfg.kind == "StaticLib" then
+			_p(' include $(BUILD_STATIC_LIBRARY)')
+		else
+			_p(' LOCAL_STATIC_LIBRARIES := android_native_app_glue')
+			_p(' include $(BUILD_SHARED_LIBRARY)')
+			_p(' $(call import-module,android/native_app_glue)')
+		end
+		_p('')
+	end
+
diff -rupN premake-4.4-beta4/src/actions/jni/_jni.lua premake-4.4-beta5/src/actions/jni/_jni.lua
--- premake-4.4-beta4/src/actions/jni/_jni.lua	1970-01-01 01:00:00.000000000 +0100
+++ premake-4.4-beta5/src/actions/jni/_jni.lua	2012-06-06 21:22:31.548299646 +0100
@@ -0,0 +1,88 @@
+--
+-- _jni.lua
+-- Define the makefile action(s).
+-- Copyright (c) 2012 Richard Swift and the Premake project
+--
+
+	_jni = { }
+	premake.jni = { }
+	local jni = premake.jni
+
+--
+-- Escape a string so it can be written to a makefile.
+--
+
+	function _jni.esc(value)
+		local result
+		if (type(value) == "table") then
+			result = { }
+			for _,v in ipairs(value) do
+				table.insert(result, _MAKE.esc(v))
+			end
+			return result
+		else
+			-- handle simple replacements
+			result = value:gsub("\\", "\\\\")
+			result = result:gsub(" ", "\\ ")
+			result = result:gsub("%(", "\\%(")
+			result = result:gsub("%)", "\\%)")
+			
+			-- leave $(...) shell replacement sequences alone
+			result = result:gsub("$\\%((.-)\\%)", "$%(%1%)")
+			return result
+		end
+	end
+	
+
+	function _jni.getmakefilename(this)
+		-- how many projects/solutions use this location?
+		local count = 0
+		for sln in premake.solution.each() do
+			for _,prj in ipairs(sln.projects) do
+				if (prj.location == this.location) then count = count + 1 end
+			end
+		end
+		
+		if (count == 1) then
+			return "Android.mk"
+		else
+			return this.name .. "\\Android.mk"
+		end
+	end
+
+--
+-- Register the "jni" action
+--
+
+	newaction {
+		trigger         = "jni",
+		shortname       = "jni ndk-build",
+		description     = "Generate ndk-build makefiles for android",
+	
+		valid_kinds     = { "ConsoleApp", "WindowedApp", "StaticLib", "SharedLib" },
+		
+		valid_languages = { "C", "C++" },
+		
+		valid_platforms = { "jni" },
+		
+		valid_tools     = {
+			cc     = { "gcc" },
+		},
+		
+		onsolution = function(sln)
+			premake.generate(sln, "Application.mk", premake.jni_solution)
+			premake.generate(sln, "Android.mk", premake.jni_makefile)
+		end,
+		
+		onproject = function(prj)
+			premake.generate(prj, _jni.getmakefilename(prj), premake.jni_cpp)
+		end,
+		
+		oncleansolution = function(sln)
+			premake.clean.file(sln, "Application.mk")
+		end,
+		
+		oncleanproject = function(prj)
+			premake.clean.file(prj, _jni.getmakefilename(prj))
+		end
+	}
diff -rupN premake-4.4-beta4/src/actions/jni/jni_makefile.lua premake-4.4-beta5/src/actions/jni/jni_makefile.lua
--- premake-4.4-beta4/src/actions/jni/jni_makefile.lua	1970-01-01 01:00:00.000000000 +0100
+++ premake-4.4-beta5/src/actions/jni/jni_makefile.lua	2012-06-06 21:25:20.336294710 +0100
@@ -0,0 +1,12 @@
+--
+-- jni_makefile.lua
+-- Generate a solution-level androidfile.
+-- Copyright (c) 2012 Richard Swift and the Premake project
+--
+
+	function premake.jni_makefile(sln)
+		_p('LOCAL_PATH := $(call my-dir)')
+		for _,prj in ipairs(sln.projects) do
+			_p('include $(LOCAL_PATH)/%s/Android.mk',prj.name)
+		end
+	end
diff -rupN premake-4.4-beta4/src/actions/jni/jni_solution.lua premake-4.4-beta5/src/actions/jni/jni_solution.lua
--- premake-4.4-beta4/src/actions/jni/jni_solution.lua	1970-01-01 01:00:00.000000000 +0100
+++ premake-4.4-beta5/src/actions/jni/jni_solution.lua	2012-06-06 21:21:36.996301340 +0100
@@ -0,0 +1,15 @@
+--
+-- android_solution.lua
+-- Generate a solution-level androidfile.
+-- Copyright (c) 2012 Richard Swift and the Premake project
+--
+
+	function premake.jni_solution(sln)
+		-- write a header showing the build options
+		_p('# %s solution makefile autogenerated by Premake', premake.action.current().shortname)
+		_p('APP_PROJECT_PATH := %s',sln.basedir)
+		_p('APP_ABI := all')
+		_p('')			
+	end
+	
+
diff -rupN premake-4.4-beta4/src/base/cmdline.lua premake-4.4-beta5/src/base/cmdline.lua
--- premake-4.4-beta4/src/base/cmdline.lua	2012-03-05 20:30:10.000000000 +0000
+++ premake-4.4-beta5/src/base/cmdline.lua	2012-06-06 13:25:41.220581114 +0100
@@ -73,6 +73,7 @@
 			{ "universal64", "Mac OS X Universal, 64-bit only" },
 			{ "ps3",         "Playstation 3 (experimental)" },
 			{ "xbox360",     "Xbox 360 (experimental)" },
+			{ "android",     "Android (experimental)" },
 		}
 	}
 	
@@ -88,4 +89,4 @@
 		trigger     = "version",
 		description = "Display version information"
 	}
-	
\ No newline at end of file
+	
diff -rupN premake-4.4-beta4/src/base/globals.lua premake-4.4-beta5/src/base/globals.lua
--- premake-4.4-beta4/src/base/globals.lua	2012-03-05 20:30:10.000000000 +0000
+++ premake-4.4-beta5/src/base/globals.lua	2012-06-06 13:27:50.084577332 +0100
@@ -45,6 +45,12 @@
 			nosharedlibs    = true,
 			namestyle       = "PS3",
 		},
+		Android = 
+		{ 
+			cfgsuffix       = "android",
+			iscrosscompiler = true,
+			namestyle       = "android",
+		},
 		WiiDev =
 		{
 			cfgsuffix       = "wii",
@@ -148,4 +154,4 @@
 		end
 		return builtin_type(t)
 	end
-	
\ No newline at end of file
+	
diff -rupN premake-4.4-beta4/src/base/project.lua premake-4.4-beta5/src/base/project.lua
--- premake-4.4-beta4/src/base/project.lua	2012-03-05 20:30:10.000000000 +0000
+++ premake-4.4-beta5/src/base/project.lua	2012-06-06 19:50:10.475896236 +0100
@@ -490,6 +490,16 @@
 				prefix = "lib"
 				ext = ".a"
 			end
+		elseif namestyle == "android" then
+			if kind == "ConsoleApp" or kind == "WindowedApp" then
+				ext = ""
+			elseif kind == "SharedLib" then
+				prefix = "lib"
+				ext = ".so"
+			elseif kind == "StaticLib" then
+				prefix = "lib"
+				ext = ".a"
+			end
 		end
 			
 		prefix = cfg[field.."prefix"] or cfg.targetprefix or prefix
diff -rupN premake-4.4-beta4/src/_manifest.lua premake-4.4-beta5/src/_manifest.lua
--- premake-4.4-beta4/src/_manifest.lua	2012-03-05 20:30:10.000000000 +0000
+++ premake-4.4-beta5/src/_manifest.lua	2012-06-06 21:22:53.204299091 +0100
@@ -49,6 +49,12 @@
 		"actions/make/make_solution.lua",
 		"actions/make/make_cpp.lua",
 		"actions/make/make_csharp.lua",
+
+		-- android action
+		"actions/jni/_jni.lua",
+		"actions/jni/jni_cpp.lua",
+		"actions/jni/jni_solution.lua",
+		"actions/jni/jni_makefile.lua",
 		
 		-- Visual Studio actions
 		"actions/vstudio/_vstudio.lua",
diff -rupN premake-4.4-beta4/src/tools/gcc.lua premake-4.4-beta5/src/tools/gcc.lua
--- premake-4.4-beta4/src/tools/gcc.lua	2012-03-05 20:30:10.000000000 +0000
+++ premake-4.4-beta5/src/tools/gcc.lua	2012-06-06 17:20:36.812162655 +0100
@@ -80,6 +80,17 @@
 			ar         = "ppu-lv2-ar",
 			cppflags   = "-MMD",
 		},
+		Android = {
+			cc         = "/opt/android-toolchain/bin/arm-linux-androideabi-gcc",
+			cxx        = "/opt/android-toolchain/bin/arm-linux-androideabi-g++",
+			ar         = "/opt/android-toolchain/bin/arm-linux-androideabi-ar",
+			ld		   = "/opt/android-toolchain/bin/arm-linux-androideabi-ld",
+			ranlib	   = "/opt/android-toolchain/bin/arm-linux-androideabi-ranlib",
+			strip	   = "/opt/android-toolchain/bin/arm-linux-androideabi-strip",
+			flags      = "--sysroot=/opt/android-toolchain/sysroot/ -fno-rtti -fno-exceptions",
+			ldflags	   = "-L/opt/android-toolchain/sysroot/usr/lib",
+			cppflags = "",
+		},
 		WiiDev = {
 			cppflags    = "-MMD -MP -I$(LIBOGC_INC) $(MACHDEP)",
 			ldflags		= "-L$(LIBOGC_LIB) $(MACHDEP)",
